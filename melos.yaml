name: method
repository: https://github.com/thipokch/method

packages:
  - packages/**

command:
  bootstrap:
    usePubspecOverrides: true
    runPubGetInParallel: false
    # It seems so that running "pub get" in parallel cause race condition.
    # See: https://github.com/dart-lang/pub/issues/3404).

scripts:
  #
  #   Melos Lifecycle
  #

  postclean: |
    melos exec -c 6 -- "flutter clean"

    echo "Cleaning secrets repo..."
    rm -rvf ./.secrets

  #
  #   Setup
  #

  setup:
    description: Setup for local development. See 'setup:secrets' for variables.
    run: |
      melos clean && \
      melos bootstrap && \
      melos setup:secrets && \
      melos setup:analysis && \
      melos setup:githook

  setup:ci:
    description: Setup for CI build. See 'setup:secrets' for variables.
    run: |
      melos clean && \
      melos bootstrap && \
      melos setup:secrets && \
      melos setup:analysis && \
      git config --global user.email "noreply@github.com" && \
      git config --global user.name "GitHub"

  setup:analysis:
    run: |
      melos exec -c 6 --scope="method_*"  -- \
        cp ../method/analysis_options.yaml ./analysis_options.yaml

  setup:githook:
    description: Setup scripts to run on git hook events.
    run: chmod -R +x .githook/ && git config core.hooksPath .githook/

  setup:secrets:
    description: |
      Clone secrets repo.
      Decode and decrypt google services config in cloned secrets repo.
      For local development, use .env to set variables:
        SECRETS_GITHUB_TOKEN - Personal acccess token.
        SECRETS_GITHUB_PATH - Path of Github repo.
        SECRETS_PASSWORD - Encryption passphrase.
    run: |
      [ ! -f .env ] || export $(grep -v '^#' .env | xargs) && \
        echo "Environment variables from .env exported..."

      export SECRETS_DIR=$MELOS_ROOT_PATH/.secrets
      export METHOD_DIR=$MELOS_ROOT_PATH/packages/method
      echo "Using '$SECRETS_DIR'..."

      echo "Cleaning previous secrets repo..."
      rm -rf $SECRETS_DIR

      echo "Using '$SECRETS_GITHUB_PATH'..."
      git clone https://$SECRETS_GITHUB_TOKEN@github.com/$SECRETS_GITHUB_PATH $SECRETS_DIR

      for f in $(find $SECRETS_DIR -name '*.enc'); do 
        echo "Decrypting ${f%.enc}..."
        openssl aes-256-cbc -md md5 -d -a -v -k $SECRETS_PASSWORD -in $f -out ${f%.enc}
        rm -rfv $f | xargs echo "Decrypted and removed: $1"
      done

      echo "Copying Google service configurations..."
      cp -v -r "$SECRETS_DIR/google/android/"* "$METHOD_DIR/android/app/src/"
      cp -v -r "$SECRETS_DIR/google/darwin/"* "$METHOD_DIR/ios/"
      cp -v -r "$SECRETS_DIR/google/web/"* "$METHOD_DIR/web/"

      cp -v -r "$SECRETS_DIR/google/flutter/dev/"* "$METHOD_DIR"
      cp -v -r $SECRETS_DIR/google/flutter/*/lib/config/firebase.*.dart "$METHOD_DIR/lib/config/"

      flutter format $METHOD_DIR/lib/config/firebase.*.dart

  setup:upgrade:
    run: |
      melos exec -c 1 -- \
        flutter pub upgrade --major-versions

  # setup:outdated:
  #   run: |
  #     melos exec -c 1 -- \
  #       flutter pub outdated

  #
  #   Build
  #

  build:num:
    description: |
      Bump build number
      For local development, use .env to set variables
        BUILD_NUM - build number
    run: dart ./packages/method/script/version_build.dart

  build:generate:
    description: Run all code generators.
    run: |
      melos build:runner && \
      melos build:splash

  build:watch:
    description: Run all code generators.
    run: |
      melos exec --depends-on="build_runner" -- \
        flutter pub run build_runner watch --delete-conflicting-outputs

  build:runner:
    run: |
      melos exec --depends-on="build_runner" -- \
        flutter pub run build_runner build --delete-conflicting-outputs &&
      melos exec --depends-on="realm" -- \
        flutter pub run realm generate

  build:splash:
    run: |
      melos exec -c 1 --scope="method" -- \
        flutter pub run flutter_native_splash:create

  #   iOS

  build:ios:
    description: |
      Build ios for given environment.
      For local development, use .env to set variables
        BUILD_ENV - build environment (dev, stg, prd)
    run: |
      echo "$SHELL"

      [ ! -f .env ] || export $(grep -v '^#' .env | xargs) && \
        echo "Environment variables from .env exported..." && \

      echo "Copying Google service configurations for $BUILD_ENV environment..." && \
      cp -v -r "$MELOS_ROOT_PATH/.secrets/google/flutter/$BUILD_ENV/"* "$MELOS_ROOT_PATH/packages/method" && \

      export MATCH_GIT_URL=$MELOS_ROOT_PATH/.secrets && \
      export MATCH_PASSWORD=$SECRETS_PASSWORD && \

      cd packages/method/ios && \
      bundle exec fastlane build_$BUILD_ENV

  build:ios:dev:
    description: Builds ios for development.
    run: export BUILD_ENV=dev && melos build:ios

  build:ios:stg:
    description: Builds ios for staging.
    run: export BUILD_ENV=stg && melos build:ios

  build:ios:prd:
    description: Builds ios for production.
    run: export BUILD_ENV=prd && melos build:ios

  #   android

  build:and:
    description: Build android for given environment.
      For local development, use .env to set variables
      BUILD_ENV - build environment (dev, stg, prd)
    run: |
      echo "Copying Google service configurations for $BUILD_ENV environment..." && \
      cp -v -r "$MELOS_ROOT_PATH/.secrets/google/flutter/$BUILD_ENV/"* "$MELOS_ROOT_PATH/packages/method" && \

      cd packages/method && \
      flutter build apk --verbose --release --flavor=$BUILD_ENV --target=lib/main.$BUILD_ENV.dart

  build:and:dev:
    description: Builds android for development.
    run: export BUILD_ENV=dev && melos build:and

  build:and:stg:
    description: Builds android for staging.
    run: export BUILD_ENV=stg && melos build:and

  build:and:prd:
    description: Builds android for production.
    run: export BUILD_ENV=prd && melos build:and

  #   web

  build:web:
    description: Build web for given environment.
      For local development, use .env to set variables
      BUILD_ENV - build environment (dev, stg, prd)
    run: flutter build web --verbose --release --target=packages/method/lib/main.$BUILD_ENV.dart

  build:web:dev:
    description: Builds web for development.
    run: export BUILD_ENV=dev && melos build:web

  build:web:stg:
    description: Builds web for staging.
    run: export BUILD_ENV=stg && melos build:web

  build:web:prd:
    description: Builds web for production.
    run: export BUILD_ENV=prd && melos build:web

  #
  #   Test
  #

  test:
    run: |
      melos test:fast
    # melos test:fast && \
    # melos test:e2e

  test:fast:
    description: Flutter tests (fail-fast)
    run: |
      melos exec -c 6 --dir-exists=test --fail-fast -- \
        "flutter test"

  test:e2e:
    description: Run all e2e tests.
    select-package:
      dir-exists:
        - test_driver
      scope: "*tests*"
    run: |
      melos exec -c 1 --fail-fast -- \
        "flutter drive --no-pub --target=./test_driver/driver_e2e.dart"

  #
  #   Hygiene
  #

  hygiene:
    description: Run all targets generally expected for local quality check. For visibility, CI uses individual steps.
    run: |
      melos setup && \
      melos build:generate && \
      melos hygiene:format && \
      melos hygiene:analyze && \
      melos hygiene:metrics && \
      melos test:fast

  hygiene:clean:
    # melos hygiene:clean -- --exclude=.env
    description: Clean things very deeply, can be used to establish "pristine checkout" status.
    run: git clean -x -d -f -q

  hygiene:metrics:
    description: |
      Run `dart_code_metrics` in all packages.
      - Note: you can also rely on your IDEs Dart Analysis / Issues window.
    run: |
      melos exec -c 1 --ignore="*test*" -- \
        flutter pub run dart_code_metrics:metrics analyze lib

  hygiene:analyze:
    # We are setting the concurrency to 1 because a higher concurrency can crash
    # the analysis server on low performance machines (like GitHub Actions).
    description: |
      Run `flutter analyze` in all packages.
       - Note: you can also rely on your IDEs Dart Analysis / Issues window.
    run: |
      melos exec -c 1 --scope="metho*" -- \
        flutter analyze . --fatal-infos

  hygiene:format:
    description: |
      Run `flutter format` in all packages.
        - Note: Exits with non-zero exit code if formatting is needed.
    run: |
      melos exec -c 1 -- \
          flutter format --output=none --set-exit-if-changed .

  #
  #   Deploy
  #

  deploy:ios:
    description: |
      Deploy ios for given environment to testflight.
      For local development, use .env to set variables:
        ASC_KEY_ID - App Store Connect key id
        ASC_ISSUER_ID - App Store Connect key issuer id
        ASC_KEY_CONTENT - App Store Connect key encoded in base64.
        BUILD_ENV - build environment (dev, stg, prd).
    run: |
      ls -R

      [ ! -f .env ] || export $(grep -v '^#' .env | xargs) && \
        echo "Environment variables from .env exported..." && \

      export APP_STORE_CONNECT_API_KEY_KEY_ID=$ASC_KEY_ID
      export APP_STORE_CONNECT_API_KEY_ISSUER_ID=$ASC_ISSUER_ID
      export APP_STORE_CONNECT_API_KEY_KEY=$ASC_KEY_CONTENT

      cd packages/method/ios && \
      bundle exec fastlane deploy_$BUILD_ENV

  deploy:ios:dev:
    description: Deploy ios development to testflight. See 'deploy:ios' for variables.
    run: export BUILD_ENV=dev && melos deploy:ios

  deploy:ios:stg:
    description: Deploy ios staging to testflight. See 'deploy:ios' for variables.
    run: export BUILD_ENV=stg && melos deploy:ios

  deploy:ios:prd:
    description: Deploy ios production to testflight. See 'deploy:ios' for variables.
    run: export BUILD_ENV=prd && melos deploy:ios

  deploy:web:
    description: |
      Deploy ios for given environment to github pages.
      For local development, use .env to set variables
        BUILD_NUM - build number
        BUILD_ENV - build environment (dev, stg, prd).
    run: |
      flutter pub run gh_pages:gh_pages build/web --message "chore($BUILD_ENV): deploy $BUILD_NUM to github pages"

  deploy:web:dev:
    run: export BUILD_ENV=dev && melos deploy:web

  deploy:web:stg:
    run: export BUILD_ENV=stg && melos deploy:web

  deploy:web:prd:
    run: export BUILD_ENV=prd && melos deploy:web
