name: method
repository: https://github.com/thipokch/method

packages:
  - '*'
  - packages/**

command:
  bootstrap:
    usePubspecOverrides: true
    runPubGetInParallel: false
    # It seems so that running "pub get" in parallel cause race condition.
    # See: https://github.com/dart-lang/pub/issues/3404).

scripts:

  #
  #   Melos Lifecycle
  #

  postclean: |
    echo "Cleaning previous secrets repo..."
    rm -rf ./.secrets

    melos exec -c 6 -- "flutter clean"

  #
  #   Setup
  #

  clean:deep:
    description: Clean things very deeply, can be used to establish "pristine checkout" status.
    run: git clean -x -d -f -q
      
  setup:secrets:
    description: |
      Clone secrets repo.
      For local development, use .env to set variables:
        SECRETS_GITHUB_TOKEN - Personal acccess token.
        SECRETS_GITHUB_PATH - Path of Github repo.
    run: |
      [ ! -f .env ] || export $(grep -v '^#' .env | xargs) && \
        echo "Environment variables from .env exported..."

      echo "Cleaning previous secrets repo..."
      rm -rf ./.secrets

      echo "Using '$SECRETS_GITHUB_PATH'..."
      git clone https://$SECRETS_GITHUB_TOKEN@github.com/$SECRETS_GITHUB_PATH ./.secrets

  setup:secrets:match:
    description: |
      Setup match (from fastlane) based on cloned secrets repo.
    run: |
      [ ! -f .env ] || export $(grep -v '^#' .env | xargs) && \
        echo "Environment variables from .env exported..."

      export MATCH_GIT_URL=files://$MELOS_ROOT_PATH/.secrets
      echo "MATCH_GIT_URL set to $MATCH_GIT_URL"

      cd ios
      bundle exec
  
  setup:secrets:google:
    description: |
      Decode and decrypt google services config in cloned secrets repo.
      For local development, use .env to set variables:
        SECRETS_PASSWORD - Encryption passphrase.
    run: |
      [ ! -f .env ] || export $(grep -v '^#' .env | xargs) && \
        echo "Environment variables from .env exported..."

      export SECRETS_REPO=$MELOS_ROOT_PATH/.secrets
      echo "Using '$SECRETS_REPO'..."

      for f in $(find $SECRETS_REPO -name '*.enc'); do 
        echo "Decrypting ${f%.enc}..."
        openssl aes-256-cbc -md md5 -d -a -v -k $SECRETS_PASSWORD -in $f -out ${f%.enc}
      done
      
  setup:android:google:
    description: |
      Copies decrypted google services config from cloned secrets repo to android directory.
    run: |
      export SECRETS_DIR=$MELOS_ROOT_PATH/.secrets
      echo "Using '$SECRETS_DIR'..."

      export SECRETS_DIR=$SECRETS_REPO/google/android/
      export SOURCE_DIR=$MELOS_ROOT_PATH/android/app/src/

      echo "Copying all google services config files under ${SECRETS_DIR} to ${SOURCE_DIR}"
      cp -v -r "${SECRETS_DIR}"* "${SOURCE_DIR}"

      for f in $(find $SOURCE_DIR -name '*.enc'); do 
        rm -rfv $f | xargs echo "Removed $1"
      done

  setup:ios:google:
    description: |
      Copies decrypted google services config from cloned secrets repo to ios directory.
    run: |
      export SECRETS_DIR=$MELOS_ROOT_PATH/.secrets
      echo "Using '$SECRETS_DIR'..."

      export SECRETS_DIR=$SECRETS_REPO/google/darwin/
      export SOURCE_DIR=$MELOS_ROOT_PATH/ios/

      echo "Copying all google services config files under ${SECRETS_DIR} to ${SOURCE_DIR}"
      cp -v -r "${SECRETS_DIR}"* "${SOURCE_DIR}"

      for f in $(find $SOURCE_DIR -name '*.enc'); do 
        rm -rfv $f | xargs echo "Removed $1"
      done

  setup:web:google:
    description: |
      Copies decrypted google services config from cloned secrets repo to web directory.
    run: |
      export SECRETS_DIR=$MELOS_ROOT_PATH/.secrets
      echo "Using '$SECRETS_DIR'..."

      export SECRETS_DIR=$SECRETS_REPO/google/web/
      export SOURCE_DIR=$MELOS_ROOT_PATH/web/

      echo "Copying all google services config files under ${SECRETS_DIR} to ${SOURCE_DIR}"
      cp -v -r "${SECRETS_DIR}"* "${SOURCE_DIR}"

      for f in $(find $SOURCE_DIR -name '*.enc'); do 
        rm -rfv $f | xargs echo "Removed $1"
      done

  #
  #   Hygiene
  #

  lint:all:
    description: Run all lint checks.
    run: |
      melos run analyze
      melos run format

  analyze:
    # We are setting the concurrency to 1 because a higher concurrency can crash
    # the analysis server on low performance machines (like GitHub Actions).
    description: |
      Run `flutter analyze` in all packages.
       - Note: you can also rely on your IDEs Dart Analysis / Issues window.
    run: |
      melos exec -c 1 -- \
        flutter analyze . --fatal-infos

  format:
    description: |
      Run `flutter format` in all packages.
        - Note: Exits with non-zero exit code if formatting is needed.
    run: |
      melos exec -c 1 -- \
          flutter format --output=none --set-exit-if-changed .
  version:manual:
    description: 
      Manually set semver version number
      For local development, use .env to set variables
        VERSION - semver version
    run: |
      dart ./script/version_semver.dart
  version:build:
    description: 
      Bump build number
    run: |
      DATE=$(date '+%y%m%d')
      TIMEHASH=$(( $(date '+%H') * 4 + $(date '+%M') / 15 )) 
      export BUILDHASH="$DATE$TIMEHASH"
      echo $HASH

      dart ./script/version_build.dart

  #
  #   Build
  #

  #   iOS

  build:ipa:dev:
    description: |
      Builds ipa for dev distribution.
      For local development, use .env to set variables:
        SECRETS_PASSWORD - Encryption passphrase.
    run: | 
      [ ! -f .env ] || export $(grep -v '^#' .env | xargs) && \
        echo "Environment variables from .env exported..."

      export SECRETS_DIR=$MELOS_ROOT_PATH/.secrets
      echo "Using '$SECRETS_DIR'..."

      export MATCH_GIT_URL=$SECRETS_DIR
      export MATCH_PASSWORD=$SECRETS_PASSWORD

      flutter build ios --verbose --release --flavor=dev --target=lib/main_dev.dart

      cd ios
      bundle exec fastlane buildDev

  build:ipa:pre:
    run: |
      [ ! -f .env ] || export $(grep -v '^#' .env | xargs) && \
        echo "Environment variables from .env exported..."

      export SECRETS_DIR=$MELOS_ROOT_PATH/.secrets
      echo "Using '$SECRETS_DIR'..."

      export MATCH_GIT_URL=$SECRETS_DIR
      export MATCH_PASSWORD=$SECRETS_PASSWORD

      flutter build ipa --verbose --release --flavor=stg --target=lib/main_stg.dart

      cd ios
      bundle exec fastlane buildStg

  build:ipa:pro:
    run: |
      [ ! -f .env ] || export $(grep -v '^#' .env | xargs) && \
        echo "Environment variables from .env exported..."

      export SECRETS_DIR=$MELOS_ROOT_PATH/.secrets
      echo "Using '$SECRETS_DIR'..."

      export MATCH_GIT_URL=$SECRETS_DIR
      export MATCH_PASSWORD=$SECRETS_PASSWORD

      flutter build ipa --verbose --release --flavor=prd --target=lib/main_prd.dart

      cd ios
      bundle exec fastlane buildPrd